<?php

namespace Tests\Feature;

use App\Domain\Orchestration\QuotePipeline;
use App\Domain\Payment\StripeGateway;
use App\Models\Payment;
use App\Models\PriceType;
use App\Models\Ticket;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Support\Facades\App;
use Illuminate\Support\Str;
use Omnipay\Omnipay;
use Ramsey\Uuid\Lazy\LazyUuidFromString;
use Tests\TestCase;
use App\Models\Event;

class PaymentTest extends TestCase
{
    use RefreshDatabase;

    private PriceType $regular;
    private PriceType $vip;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->authNormal();
    }

    /** @test */
    public function paid_events_can_be_paid_for()
    {
        $this->withoutExceptionHandling();

        Event::factory(50)
            ->hasAddress()
            ->hasFlyer()
            ->create();

        $this->regular = PriceType::factory()->create(['type' => 'Regular']);
        $this->vip = PriceType::factory()->create(['type' => 'VIP']);

        Event::all()->each(function ($event) {
            $event->prices()->attach($this->regular->id, ['price' => 50]);
        });

        Event::all()->each(function ($event) {
            $event->prices()->attach($this->vip->id, ['price' => 100]);
        });

        $this->mock(StripeGateway::class)
            ->shouldReceive('charge')
            ->andReturn(['id' => '1234567890']);

        $paymentTypeAndQuantity = [
            $this->regular->id => 3,
            $this->vip->id => 4,
        ];

        $response = $this->post(
            route('api.payment.charge'),
            [
                'event_id' => Event::first()->id,
                'platform' => 'iOS',
                'payment_type_and_quantity' => $paymentTypeAndQuantity,
                'token' => 'tok_mastercard'
            ]
        )->decodeResponseJson();

        $this->assertTrue(1 === Payment::count());
        $this->assertTrue(7 === Ticket::count());

        $data = $response->json('data');

        $this->assertEquals('1234567890', $data['reference']);
        $this->assertEquals(550.0, $data['amount_paid']);
        $this->assertEquals('iOS', $data['platform']);
        $this->assertNotEmpty($data['user']);
        $this->assertNotEmpty($data['event']);
        $this->assertTrue(7 === count($data['tickets']));

        $this->assertEquals($this->regular->id, $data['tickets'][0]['price_type_id']);
        $this->assertEquals($this->regular->id, $data['tickets'][1]['price_type_id']);
        $this->assertEquals($this->regular->id, $data['tickets'][2]['price_type_id']);
        $this->assertEquals($this->vip->id, $data['tickets'][3]['price_type_id']);
        $this->assertEquals($this->vip->id, $data['tickets'][4]['price_type_id']);
        $this->assertEquals($this->vip->id, $data['tickets'][5]['price_type_id']);
        $this->assertEquals($this->vip->id, $data['tickets'][6]['price_type_id']);
    }

    /** @test */
    public function free_events_can_be_paid_for()
    {
        $this->withoutExceptionHandling();

        $event = Event::factory()->create();

        $response = $this->post(
            route('api.payment.charge'),
            [
                'event_id' => $event->id,
                'platform' => 'iOS',
                'payment_type_and_quantity' => [],
                'token' => 'tok_mastercard'
            ]
        )->decodeResponseJson();

        $this->assertTrue(1 === Payment::count());
        $this->assertTrue(1 === Ticket::count());

        $data = $response->json('data');

        $this->assertEquals('free', $data['reference']);
        $this->assertEquals(0, $data['amount_paid']);
        $this->assertEquals('iOS', $data['platform']);
        $this->assertNotEmpty($data['user']);
        $this->assertNotEmpty($data['event']);
        $this->assertTrue(1 === count($data['tickets']));
        $this->assertNull($data['tickets'][0]['price_type_id']);
    }
}
